body {
    font-size: 3rem;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    background-color: rgba(0,0,0,.2);
    color: white;
}
.grid-item {
    padding: 1.5rem;
    border-radius: 1rem;
}

.grid-item:nth-child(2n) {
    background-color: darkgreen;
}

.grid-item:nth-child(2n+1) {
    background-color: forestgreen;
}

.grid {
    padding: 1em;
    /* ponemos ya aquí lo básico del grid */
    display: grid;
    grid-column-gap: 1rem;
    grid-row-gap: .5rem;
}


.item-extra {
    background-color: rgb(75, 204, 0)!important; /* $$: Se utiliza !important por la especifidad que dan las pseudo clases nth-child de arriba */
}

/** De aquí a abajo es donde empieza la programación de grid **/

.grid {
    /* repeat()
    grid-template-columns: repeat(3, 1fr); /* Con esto decimos que repita 3 veces una columna de 1fr */
    /*grid-template-columns: 20% repeat(2, 1fr) repeat(2, 2fr) /* En este caso, decimos que queremos una
    columna de un 20%, dos columnas de 1 fr y dos columnas de 2fr */
    /* grid-template-columns: repeat(2, 100px 1fr); */

    /* minmax(): dar un tamaño minimo y máximo:
    grid-template-columns: minmax(100px, 250px) 1fr;/* Pon una columna que como mínimo mide 100px y como máximo 250, y otra de 1fr*/

    /* Mezclando la función repeat() con la función minmax(): */
    /* grid-template-columns: minmax(100px, 20%) repeat(2, 100px 1fr); */
    grid-template-columns: minmax(100px, 20%) repeat(2, minmax(50px, 100px) 1fr);
}